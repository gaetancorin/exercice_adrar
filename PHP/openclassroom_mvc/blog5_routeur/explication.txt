///// V2= UN CONTROLLER + +model+views
création fonctionnement MVC avec
index.php est le controller
model.php dans le dossier src est le modèle
homepage.php dans le dossier template est la vue

---- On crée un controller index.php qui affiche les différents articles--- 
Le controller index.php appelle une fonction dans le modèle.
(cette fonction va chercher les articles dans la bdd et les retourne en format tableau)
Le résultat est stocker dans une variable dans le controller
On fournis la variable au template qui itère les articles et les affiche.


/////// V3= UN 2EME CONTROLLER AVEC PARAMETRE PASSÉ DANS SON URL
(le controller index.php récupère désormais l'id des articles et le transmet à son template.
Le template crée un bouton commentaire sous chaque article. Ce bouton fait une requête vers le nouveau controller post.php avec l'id en paramètre dans l'url )

---- On crée un controller post.php qui affiche les commentaires de 1 article ----
Ce controller récupère le paramètre id passé dans l"url.
Il appelle la fonction getPost() qui récupère les informations de l'article ayant le même id que celui passé en paramètre. 
Il appelle la fonction getComments() qui récupère les informations des commentaires ayant une clé étrangère avec le même id que celui passé en paramètre.

Il appelle son template post.php qui affiche l'article et les commentaires de cet article

////// V4= TEMPLATE UTILISANT UN LAYOUT
(le layout est un template avec des variable vide. Il est relié à un autre template qui lui donne les valeurs de variable)

on crée un layout layout.php qui a deux variables vide($title et $content)
la template homepage.php va lui fournir la variable $title, puis va récupérer l'ensemble de son html et va le mettre dans la variable $content.
puis il va require le layout qui affichera son contenu avec les variables fournis

/////// V5= INSTALLATION DU ROUTEUR
La page index.php sera notre routeur.
Les controllers sont désormais rangé dans src/controllers .
Les fichiers controllers ne font plus aucune action. Ils sont désormais des points d'accès afin que le routeur puisse accéder à leur fonction.
L'intégralité des actions qu'ils faissaient avant sont désormais dans leur fonction.
Les require() dans les controllers deviennent des require_once() pour éviter les doublons.
Si un controller nécessite un ID, il faut lui fournir dans le paramètre de sa fonction
!Attention! Il ne faut pas mettre de point dans le nom des pages

Pour passer d'une page à l'autre, on intègre le paramètre 'action' dans l'url en méthode get. Tous les urls seront donc 'index?action=(CONTROLLER)' ou 'index?action=(CONTROLLER)&id=(ID)'.
Le routeur va require toutes les pages controllers, vérifier l'action et l'id passé en paramètre dans l'url et démarrer la fonction du bon controller avec des principes de if/else.