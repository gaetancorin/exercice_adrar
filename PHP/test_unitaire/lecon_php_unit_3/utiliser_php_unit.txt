https://www.youtube.com/watch?v=kkU43JdJQBE&t=151s
LECON_PHP_UNIT_1
créer un dossier
taper la commande "composer require --dev phpunit/phpunit" pour installer le framework de test unitaire sur le dossier

créer un dossier tests avec un fichier exemple.php à l'intérieur.
remplissons le fichier avec un test vide
<?php

class exemple extends \PHPUnit\Framework\TestCase{
    public function testThatStringsMatch(){
        
    }
}
puis dans le terminal, on lance le test avec "php vendor/bin/phpunit tests/exemple.php"
"php vendor/bin/phpunit" sert à atteindre les fichiers interne de php unit
"tests/exemple.php" sert à atteindre la classe 'exemple' du fichier exemple.php. 
(Visiblement le nom de la classe doit être identique au nom du fichier.)
Le test est un test "risky" car vide. remplissons le avec un véritable test.
<?php

class exemple extends \PHPUnit\Framework\TestCase{
    public function testThatStringsMatch(){
        $string1 = 'testing';
        $string2 = 'testing';

        $this->assertSame($string1, $string2);
    }
}
!ATTENTION! Le nom de la fonction test doit toujours commencé test, sinon il n'est pas prit en compte
le test fonctionne. Rajoutons un autre test dans la class et lancons les 2 tests en même temps.
Les 2 tests fonctionnent.

///////////////////////////////////////////////////////////////
LECON_PHP_UNIT_2
On crée une class d'objet 'Cart.php' en dehors du dossier 'tests'
Puis on crée son fichier de test dans le dossier test 'CartTest.php'. On crée un test.
chaque test créer dans ce fichier va 'require' le fichier 'Cart.php' pour instancier un objet et effectué les tests
Pour effectuer les tests de ce nouvel objet, on utilise la commande 
"php vendor/bin/phpunit tests/CartTest.php --colors"

on crée un deuxième test pour Cart.
On va faire fonctionner uniquement le second test grace à la ligne de commande:
"vendor/bin/phpunit tests/CartTest.php --colors --filter nomdemafonction"
(on peut commenter le test en utilisant     /** commentaire **/ au dessus du test.)

désormais, créons le fichier phpunit.xml
C'est le fichier qui sert à créer la configuration par défaut des tests.
Dans la balise <phpunit>, On indique que l'on active la couleur pour tous les tests avec l'attribut colors="true"
Dans les balises <directory>, on donne le nom de notre répertoire 'tests' dans lequel il y a nos tests 
pour que lorsque l'on fasse tourner nos tests, ils activent la configuration préalablement choisie

Lorsque l'on fait fonctionner des tests, un fichier '.phpunit.result.cache' se crée et répertorie tous les échecs de tests.
On va éviter qu'il soit créer en ajoutant la propriété cacheResult="false" dans la balise <phpunit>
//////////////////////////////////////////////
LECON_PHP_UNIT_3
Nous allons créer une manière d'éviter de require tous nos modèles dans chacun de nos tests.
Dans phpunit.xml, sur la balise <phpunit>, nous ajoutons l'attribut bootstrap="vendor/autoload.php"
Ensuite on crée un dossier src dans lequel on place toutes nos classes d'objets.

On rajout le namespace App au dessus de la classe d'objet "Cart", puis dans 'composer.json' je rajout à "require-dev"
une virgule , puis on crée le mapping entre App et le dossier src : 
"autoload":{
    "psr-4":{
        "App\\": "src"
    }
}
je rajoute "use App\Cart;" au dessus de mes tests unitaires utilisant le modèle 'Cart' afin d'appeler ce modèle
directement sur toute la page par le Namespace. 	
Je peut désormais enlever les requires qui ont été ajouté à l'intérieur des fonctions car maintenant, elles utilisent le Namespace.
Puis dans le terminal, je lance "composer dump-autoload -o" qui génère les autochargement de fichiers
Si je lance mes tests sans require, cela marche à nouveau.
//////////////////////////////////////
LECON_PHP_UNIT_4




